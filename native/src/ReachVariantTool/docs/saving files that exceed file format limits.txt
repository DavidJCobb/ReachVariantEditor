
Currently, ReachVariantTool is only capable of saving files in Reach's game variant 
file format; it can also only load the same. How, then, do we save files that exceed 
the limits of the file format? If an overambitious scripter accidentally creates a 
gametype that can't physically fit within the format limits, how do we ensure that 
they don't lose their work?

Well, first, we need to examine the limits at play:

 - It is impossible to have too many entries in any indexed list. Our UI is coded 
   to prevent this from ever occurring. As such, we don't need to worry about those 
   limits.

 - The total size of a string table's text content can exceed the string table's 
   maximum buffer size, as well as the maximum size representable with its buffer 
   size bitlength.

 - The total size of all content in the MPVR block can exceed the MPVR block's 
   capacity (0x5028 bytes, including mandatory block header content).

There are two failure cases, then, that we need to handle: a string table's internal 
limits being exceeded, and the MPVR block size limit being exceeded. We can address 
both limits in the same way.

Game variant files only have four supported blocks: _blf, chdr, mpvr, and _eof. We 
can embed custom blocks in a file to hold whatever data we like, but MCC and Halo 
Reach will discard these blocks when resaving the file. This means that we can embed 
extra data in a custom block -- such as data that would ordinarily exceed the MPVR 
limitations.

Accordingly, we use the signature 'xRVT' for our custom block. The block is divided 
into subrecords, each having a four-byte signature, version number, flags mask, size, 
and miscellaneous content depending on the signature. Currently we define two sub-
record types:

   mstr

      Raw content for the main string table. Strings are written end-to-end, split 
      apart with null terminators, from the first ReachString to the last, and with-
      in each ReachString from the first language to the last. No languages are 
      skipped even if one has a -1 offset in the table.

   mscr

      The full script code (conditions, actions, triggers) exactly as it would be 
      serialized into a normal game variant, followed by the trigger entry points.

When saving a game variant, we first check if its predicted size exceeds the MPVR 
size limit. If so, we decide to write only a placeholder string table, with the 
true string content being written to the xRVT/mstr subrecord. The placeholder data 
is formatted as follows: for each ReachString, we write only a single localization 
of the format "str000", "str001", etc., using the ReachString's index in the table.

Once the placeholder content is written, we can compute how much room we've managed 
to save. If the game variant's predicted size (with the new savings) still exceeds 
the MPVR size limit, then we decide to write the script code to xRVT/mscr. The MPVR 
block will be given an empty script (no conditions, actions, or triggers) and blank 
trigger entry points. Variable declarations and similar are written as normal.

So that describes what we're writing into the file. How do we actually carry out 
this process at run-time?

The GameVariantDat class has virtual methods allowing it to receive an xRVT subrecord 
on load, and to offer a list of subrecords on save. During the save process, the MP 
data will retain subrecords so that when the "offer" function is called, it can hand 
them over to be written to an xRVT file block. During the load process, we retain 
all seen subrecords in all seen xRVT blocks, and when the load process is at its 
end, we then forward all subrecords to the MP data for it to use as it wishes.