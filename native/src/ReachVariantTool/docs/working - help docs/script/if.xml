<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<article>
   <title>If-statements</title>
   <body>
      <p>
         If you want to run a piece of code only when certain conditions are met, you 
         should use an if-statement:
      </p>
      <pre>
         for each player do
            if current_player.team == team[0] then
               --
               -- ... do something ...
               --
            end
         end
      </pre>
      <p>
         An if-statement typically consists of the word "if," followed by one or more 
         conditions. Each condition is either a comparison statement or a function call. 
         Conditions must be separated from each other by the word "or" or the word "and." 
         A condition may be prefixed with the word "not". After the conditions, you must 
         write the word "then".
      </p>
      <p>
         Conditions are executed in sequence. You cannot adjust the order of operations 
         e.g. by using parentheses. If you want to test an expression like "(<var>A</var> 
         and <var>B</var>) or (<var>C</var> and <var>D</var>)," then you have two options:
      </p>
      <ul>
         <li>
            Initialize a variable to 0. Set it to 1 if "<var>A</var> and <var>B</var>." Set 
            it to 1 if "<var>C</var> and <var>D</var>." If the variable is 1, then run your 
            code.
         </li>
         <li>
            Write two if-statements with your code duplicated inside of them. The first 
            if-statement should test "<var>A</var> and <var>B</var>." The second if-statement 
            should test not "<var>A</var> or not <var>B</var> and <var>C</var> and <var>D</var>."
         </li>
      </ul>
      
      <h2>Alt and alt-if</h2>
      <p>
         Megalo does not have any built-in "else" or "elseif" statements. However, the Megalo 
         dialect used by ReachVariantTool offers similar statements as a shortcut. The two 
         pieces of code below behave identically (in fact, the former compiles to the latter):
      </p>
      <pre>
         if x == 1 then
            run_function_a()
         altif y == 1 then
            run_function_b()
         alt
            run_function_c()
         end
      </pre>
      <pre>
         if x == 1 then
            run_function_a()
         end
         if x != 1 and y == 1 then
            run_function_b()
         end
         if x != 1 and y != 1 then
            run_function_c()
         end
      </pre>
      <p>
         The main difference between this construct and "else(if)" is that if, in our example 
         above, if <var>x</var> is initially 1 but <var>run_function_a</var> changes the value 
         of <var>x</var> to something other than 1, then both the "x is 1" and "x is not 1" 
         branches may be able to run.
      </p>
      <p>
         If you need your branches to be mutually exclusive as they would be in an "else(if)" 
         statement, then you will need to use a variable to maintain state:
      </p>
      <pre>
         alias ran_any = global.number[0]
         ran_any = 0
         if x == 1 then
            ran_any = 1
            run_function_a()
         end
         if ran_any == 0 then
            if y == 1 then
               ran_any = 1
               run_function_b()
            end
            if ran_any == 0 then
               if y != 1 then
                  run_function_c()
               end
            end
         end
      </pre>
      <p>
         The example above may be easier to read if you consider that else(if) statements can 
         be written as nested else and if statements:
      </p>
      <pre>
         if x == 1 then
            run_function_a()
         else
            if y == 1 then
               run_function_b()
            else
               run_function_c()
            end
         end
      </pre>
      
      <h2>Else and else-if</h2>
      <p>
         As mentioned in the section above, the Megalo script engine doesn't have any built-in 
         support for "else(if)" statements. It would be theoretically possible for the compiler 
         to support such statements by automating the workaround described above, but this has 
         not been implemented as of this writing, and it would come with some ugly limitations 
         involving the nesting of else(if) statements.
      </p>
      
      <h2>Micro-optimizations</h2>
      <p>
         In Megalo, most code blocks compile to a single "trigger," or compiled block. However, 
         if-statements are a common exception. Conditions can be compiled directly into their 
         containing blocks, and they act as a kind of conditional exit: the block stops running 
         early if the condition is not met. This means that if an if-statement is the last 
         element in its containing block, then it can be "inlined" into that block's compiled 
         trigger, but if the if-statement isn't the last element, then it has to be compiled as 
         a nested trigger.
      </p>
      <p>
         In other words: the following two pieces of code do the same thing, but the second one 
         uses one less trigger and so contributes less to script size limits:
      </p>
      <pre>
         for each player do
            if current_player.team == team[0] then
               game.show_message_to(current_player, none, "Your objective is under attack!")
            end
            script_widget[0].set_visibility(current_player, true)
         end
      </pre>
      <pre>
         for each player do
            script_widget[0].set_visibility(current_player, true)
            if current_player.team == team[0] then
               game.show_message_to(current_player, none, "Your objective is under attack!")
            end
         end
      </pre>
   </body>
</article>