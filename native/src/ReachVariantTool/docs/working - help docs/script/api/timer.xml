<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script-type name="timer" is-variable="true">
   <friendly>Timer</friendly>
   <blurb>A variable meant to represent time. It can be set to count up or down.</blurb>
   <description>
      <p>
         Timer variables are essentially numbers that represent a high-resolution 
         quantity of time. They can be set to count upward or downward, and the 
         speed at which they count can be changed as well. They can have their 
         current values set to any integer quantity of seconds by script. Timers 
         don't have a networking priority.
      </p>
      <p>
         If a timer variable is set to count down, then its rate will switch to 
         stopped when it reaches zero. If a timer variable has a non-zero initial 
         value and it is set to count up, then its rate will switch to stopped 
         when it reaches that initial value. If a timer variable has a zero 
         initial value and it is set to count up, then it will count up 
         indefinitely.
      </p>
      <p>
         Timer values are high-resolution. If two timers are compared to each other, 
         then they will compare properly even if the differences in their values are 
         less than one second.
      </p>
      <p>
         There are eight global timer variables, numbered from 0 to 7, which can 
         be accessed as <code>global.timer[<var>n</var>]</code>.
      </p>
   </description>
   <methods>
      <conditions>
         <method name="is_zero" id="5">
            <blurb>Checks whether the timer's value is zero.</blurb>
            <example>
               --
               -- A common use of timers is to announce the gametype name at the 
               -- start of a round, by "sending an incident" a few seconds after 
               -- script processing begins.
               --
               alias announced_start = player.number[0]
               alias announced_timer = player.timer[0]
               declare player.announced_timer = 5
               --
               for each player do
                  if current_player.announced_start == 0 then
                     current_player.announced_timer.set_rate(-100%)
                     if current_player.announced_timer.is_zero() then
                        current_player.announced_start = 1
                        send_incident(action_sack_game_start, current_player, no_player)
                     end
                  end
               end
            </example>
         </method>
      </conditions>
      <actions>
         <method name="set_rate" id="17">
            <args>
               <arg name="rate">
                  <p>The rate and direction at which the timer should advance. Positive 
                  values will make the timer's value increase away from zero, while 
                  negative values will make the timer's value decrease to (but not 
                  past) zero. You may use any of the following rates (prefixed with 
                  a minus sign for negative values):</p>
                  <ul>
                     <li>0%</li>
                     <li>10%</li>
                     <li>25%</li>
                     <li>50%</li>
                     <li>75%</li>
                     <li>100%</li>
                     <li>125%</li>
                     <li>150%</li>
                     <li>175%</li>
                     <li>200%</li>
                     <li>300%</li>
                     <li>400%</li>
                     <li>500%</li>
                     <li>1000%</li>
                  </ul>
               </arg>
            </args>
            <blurb>Set the rate and direction in which the timer advances.</blurb>
            <example>
               --
               -- A common use of timers is to announce the gametype name at the 
               -- start of a round, by "sending an incident" a few seconds after 
               -- script processing begins.
               --
               alias announced_start = allocate player.number
               alias announced_timer = allocate player.timer
               declare player.announced_timer = 5
               --
               for each player do
                  if current_player.announced_start == 0 then
                     current_player.announced_timer.set_rate(-100%)
                     if current_player.announced_timer.is_zero() then
                        current_player.announced_start = 1
                        send_incident(action_sack_game_start, current_player, no_player)
                     end
                  end
               end
            </example>
         </method>
         <method name="reset" id="43">
            <blurb>Reset a timer to its initial value.</blurb>
            <example>
               --
               -- Do something every ten seconds:
               --
               declare global.timer[0] = 10
               
               do
                  global.timer[0].set_rate(-100%)
                  if global.timer[0].is_zero() then
                     global.timer[0].reset()
                     --
                     -- ...and do the thing here
                     --
                  end
               end
            </example>
         </method>
      </actions>
   </methods>
</script-type>