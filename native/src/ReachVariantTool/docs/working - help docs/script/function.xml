<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<article>
   <title>User-defined functions</title>
   <body>
      <p>
         Megalo's bytecode supports <dfn>user-defined functions</dfn>: reusable pieces of 
         script code that can be "called" from multiple different locations. User-defined 
         functions are useful for avoiding code duplication, if you have tasks that need 
         to be performed consistently at different points in your script; they are also a 
         good way to repeat tasks.
      </p>
      <p>
         Functions run with the "environment" of their caller. For example, a function 
         called from inside of a <a href="for">for each object</a> loop can access the 
         <var>current_object</var> value.
      </p>
      <p>
         This code sample creates five skulls and pushes them upward semi-randomly:
      </p>
      <pre>
         --
         -- Define the function:
         --
         function my_cool_code()
            global.object[1] = global.object[0].place_at_me(skull, none, none, 0, 0, 0, none)
            global.object[1].push_upward()
            global.object[1].push_upward()
         end
         
         --
         -- Call the function five times:
         --
         my_cool_code()
         my_cool_code()
         my_cool_code()
         my_cool_code()
         my_cool_code()
      </pre>
      <p>
         User-defined functions can be <dfn>recursive</dfn>: that is, they can call themselves 
         in order to run under specific conditions:
      </p>
      <pre>
         --
         -- This function will perform a task "global.number[0]" many times:
         --
         function spawn_skulls()
            global.object[1] = global.object[0].place_at_me(skull, none, none, 0, 0, 0, none)
            global.object[1].push_upward()
            global.object[1].push_upward()
            --
            global.number[0] -= 1
            if global.number[0] > 0 then
               spawn_skulls()
            end
         end
         
         --
         -- Let's spawn ten skulls:
         --
         global.number[0] = 10
         spawn_skulls()
      </pre>
      <p>
         When writing recursive functions, you need to be careful to ensure that the function 
         actually <em>ends</em>: there must be some circumstance under which the function 
         <em>does not</em> call itself anymore.
      </p>
      <p>
         Megalo doesn't have the ability to loop over a numeric range; however, as shown above, 
         recursive functions can be used as a substitute.
      </p>
   </body>
</article>